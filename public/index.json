[{"categories":null,"contents":"想要参加技术会议，但是需要说服老板？这里有一份模版来自\nhttps://jamstackconf.com/sf/convince-your-boss/\nConvince Your Boss Eager to attend but need to convince the higher-ups? We've prepared a template describing many of the reasons why you and your company will benefit from attending the conference.\nYou can also email us with inquiries on group discounts or any other questions!\nDear (amazing boss), I'd like your permission to attend JAMStack_conf (jamstackconf.com) on October 16 to 18, 2019 at City View at Metreon, SF. I'm hoping you can help make it possible.\nWhile there are lots of developer-oriented conferences, JAMStack_conf uniquely tackles the exact topics my team has been working to get our heads around: modern web deployment workflows and practices. This is the perfect chance to tune-up (and level-up) all the processes and tech we are using to deploy, publish, and build our sites and apps.\nI’ll return from the event with a bunch of notes and steps we can implement immediately to make all our web properties more performant and more secure. It's the best two days I've seen for advancing my own skills and bringing a ton of best practices back to my team. As they say, this conference is “where frameworks and API services combine to create real, production results.”\nAdvantages for our company: The things I’ll learn over the two-day conference will help us:\n Build new processes for faster, more predictable deployments and publishing Increase the performance of all our websites Reduce infrastructure requirements and lower costs Increase web security and reduce our surface area for attacks Deploy our websites globally and without single points of failure  Advantages for me and my development: For my own growth as a developer, I’m excited because:\n There’s a fantastic speaker lineup of the experts who work on the frameworks and technologies we use daily. The intimacy of this conference will allow me to interact with the speakers and ask questions. I’ll also learn from 500 other developer attendees focused on building for the web. I can ask questions, learn best-practices from their projects, and create connections. I'll learn more about the deployment and front-end technologies that have taken the leading role in modern web development. This is a big shift and an important time to learn about it.  Here’s a breakdown of expenses Registration fee$399Travel$200Total$599\nI'll bring direct, actionable knowledge back to my work, including notes and steps we can implement immediately to make all our web properties more performant and more secure. I can make an internal presentation discussing what I learned and how it can be applied to improve our project infrastructure. The conference will also provide us with a package of videos and slides from all the talks that I can bring back to the team.\nPlease take a look at the website and the speaker lineup. Hopefully, you are as excited about it as I am. Seems like a great event and a great investment in training one of your favorite employees.\nThanks!\nSincerely,\nA dev with a passion for learning\n","permalink":"https://y4code.com/post/%E5%8F%82%E5%8A%A0%E6%8A%80%E6%9C%AF%E4%BC%9A%E8%AE%AE%E8%AF%B4%E6%9C%8D%E8%80%81%E6%9D%BF%E7%9A%84%E6%A8%A1%E7%89%88/","tags":null,"title":"参加技术会议说服老板的模版"},{"categories":null,"contents":"原文链接\nhttps://medium.com/refactoring-ui/7-practical-tips-for-cheating-at-design-40c736799886\n使用颜色和 Weight 来创造等级而不是大小\n  主内容使用暗色（而不是黑色）（一篇文章的标题一样）\n  二级内容使用灰色（已发布文章的日期）\n  附加内容使用更轻（lighter）的灰色（maybe footer 的版权声明）\n  大多数文本 使用 400/500 weight\n  加重强调的文本 使用 600/700\n  不要使用400 以下 weight\n  不要在有颜色的背景中使用灰色字\n 让文本颜色接近于背景色，而不是 浅灰 就完事了 两条在colorful 背景中减少对比度的方法  减少白色字体的透明度 based on 背景色选取一个颜色，色彩不变，调节它的饱和度明度（maybe 明度增加）    抵消阴影\n 单 使用向下的阴影 和 阴影扩散而不是 各个角度阴影，因为这像我们现实中看事物的方式  更少得使用 border\n 过多的 border 使内容杂乱，下次你想用的时候可以尝试  使用 box shadow来作为 border 区分内容 使用两种不同的（细微变化的）背景色 在毗连元素上 增加额外的空白    不要放大你的原本意在小的 icon\n 另外，尝试给无边小图标 加背景色和一个形状 以闭合它  使用单边border 为清淡的设计增加颜色\n 导航栏，为已 active 的的 item 增加一个高亮 或者是整个页面的顶部有个条 Dribble Color Search 配色指南 https://dribbble.com/colors/d4f49c  不是每个 button 都需要一个背景色\n  主要的action应该是明显的 固定的？ 高差异的背景色在这里很好用\n  二级action应该是清晰的但不是重要的，轮廓样式或者 低差异化的背景色是个很好的选择\n  三级action 应该是可以发现的，但不能是招摇的，使用Link样式对 这些action works fine\n  如果破坏性button不是主action，那应该是二级action的待遇\n  ","permalink":"https://y4code.com/post/7-practical-tips-for-cheating-at-design-%E7%AE%80%E9%99%8B%E7%BF%BB%E8%AF%91/","tags":null,"title":"7 Practical Tips for Cheating at Design 简陋翻译"},{"categories":null,"contents":"git filter-branch -f --commit-filter ' if [ \u0026quot;$GIT_AUTHOR_NAME\u0026quot; != \u0026quot;给你康的名字\u0026quot; ]; then GIT_AUTHOR_NAME=\u0026quot;给你康的名字\u0026quot;; GIT_AUTHOR_EMAIL=\u0026quot;给你康的邮箱\u0026quot;; git commit-tree \u0026quot;$@\u0026quot;; else git commit-tree \u0026quot;$@\u0026quot;; fi' HEAD  其中第二行还可以改成\nif [ \u0026quot;$GIT_AUTHOR_NAME\u0026quot; = \u0026quot;不想给你康的名字\u0026quot; ];  完事后强制推送\ngit push --force --tags origin 'refs/heads/*' ","permalink":"https://y4code.com/post/%E6%9B%BF%E6%8D%A2-git-%E5%8E%86%E5%8F%B2%E8%AE%B0%E5%BD%95%E4%B8%AD%E7%9A%84%E6%8C%87%E5%AE%9A-username-%E6%88%96%E8%80%85-email/","tags":null,"title":"替换 Git 历史记录中的指定 username 或者 email"},{"categories":null,"contents":"Docker 单服务部署 我用的是 nginxconfig.io 的 服务，似乎现在被 DigitalOcean 给蓝金黄了，点击链接会跳转到 DigitalOcean 的网站，Anyway，服务是很好用的，你要做是简单填写几项，网站会自动生成完整可用的 Nginx 配置\n⚠️ 需要注意的是  生成的配置需要和原有的配置合并才可用，即覆盖配置\n在参照 nginxconfig.io 的步骤都结束，并且你的网站可以通过https 正常访问时，然后\n测试网络\ndocker run --rm --name mynginx -p 80:80 -d nginx\n测试没有问题后\ndocker run --rm --name mynginx -v /etc/nginx:/etc/nginx -v /etc/letsencrypt:/etc/letsencrypt -v /var/www/_letsencrypt:/var/www/_letsencrypt -v /var/www/STATIC_FOlDER:/var/www/YOUR_DOMAIN -p 80:80 -p 443:443 -d nginx\n就 OK 了 但是涉及到 Docker 容器之间的通信就比较费劲，参考了一圈之后，我决定使用 Docker 自带的 Docker Network 来通信\n使用 GitLab CI/CD Docker Swarm 部署 我打算在虚拟机上部署三个服务\n1. 静态资源 2. Go （Gin）写的后端服务 3. Nginx  我想要实现的效果是访问网站根路径会 定向到静态资源，访问根域加 /api/ 会转到 Go 服务中\n所以我是这样做的，Docker 启两个容器，Nginx镜像 和 Go 代码打包的镜像，使用 Docker Swarm 的方式启动起来，并且分配一个共同网络\n最关键的一步，Nginx 配置的反向代理配置为\n/api/ =\u0026gt; http://GO_CONTAINER_NAME:8080 GitLab 的 CI/CD 及其好用，在我苦索免费 Docker 私有 Registry 时候看到了 GitLab 的仓库 Registry，每个 repo 都可以有一个 公/私 有镜像库，我哭廖\n贴一下过程中常用命令\ndocker container cp mynginx:/etc/nginx . docker login -u \u0026quot;GITLAB_USERNAME\u0026quot; -p \u0026quot;GITLAB_PASSWORD\u0026quot; registry.gitlab.com docker build -t registry.gitlab.com/GITLAB_USERNAME/REPO_NAME . docker push registry.gitlab.com/GITLAB_USERNAME/REPO_NAME docker swarm leave -f docker rmi registry.gitlab.com/GITLAB_USERNAME/REPO_NAME docker pull registry.gitlab.com/GITLAB_USERNAME/REPO_NAME docker swarm init docker stack deploy -c swarm.yml cluster ","permalink":"https://y4code.com/post/%E5%9C%A8-docker-%E4%B8%AD%E8%BF%90%E8%A1%8C-nginx-%E5%90%8C%E6%97%B6-ssl-https-%E8%AE%A4%E8%AF%81/","tags":null,"title":"在 Docker 中运行 Nginx，同时 SSL/HTTPS 认证"},{"categories":null,"contents":"回答\n北岛\n卑鄙是卑鄙者的通行证，\n高尚是高尚者的墓志铭。\n看吧，在那镀金的天空中，\n飘满了死者弯曲的倒影。\n冰川纪过去了，\n为什么到处都是冰凌？\n好望角发现了，\n为什么死海里千帆相竞？\n我来到这个世界上，\n只带着纸、绳索和身影，\n为了在审判之前，\n宣读那些被判决了的声音：\n告诉你吧，世界，\n我——不——相——信！\n纵使你脚下有一千名挑战者，\n那就把我算做第一千零一名。\n我不相信天是蓝的，\n我不相信雷的回声；\n我不相信梦是假的，\n我不相信死无报应。\n如果海洋注定要决堤，\n就让所有的苦水都注入我心中；\n如果陆地注定要上升，\n就让人类重新选择生存的峰顶。\n新的转机和闪闪的星斗，\n正在缀满没有遮拦的天空，\n那是五千年的象形文字，\n那是未来人们凝视的眼睛\n","permalink":"https://y4code.com/post/%E8%AF%97-%E5%9B%9E%E7%AD%94/","tags":null,"title":"诗 《回答》"},{"categories":null,"contents":"写完博客后，通常我都是找到 `hexo clean hexo generate` 然后再把 CNAME 拷贝到生成的 public 文件夹中，然后再 `hexo deploy`\n很烦\n然后在听内核恐慌 ＃3 ”静态网站生成器“ 的时候，Rio 说到在写博客的时候碰命令行是一件有摩擦力的事情，我就突然明白了\n下面是我的 hexo 一键 shell 命令\n``` $ #!/bin/bash\n$ hexo clean $ hexo generate $ cp CNAME public $ hexo deploy\n$ echo \u0026ldquo;hexo 一键发布命令 , Inspired by Rio \u0026amp; Tao Wu on the Kernal Panic No 3\u0026rdquo; $ echo \u0026ldquo;写作的时候不想碰命令行 , 命令行会给写作带来 \u0026ldquo;摩擦力\u0026rdquo; \u0026quot; $ echo \u0026ldquo;不要忘记打开 GitHub for Desktop push 哟\u0026rdquo; $ echo \u0026ldquo;记得要经常写博客哟～\u0026rdquo;```\n写好了用这篇文章来测试\n","permalink":"https://y4code.com/post/hexo-%E4%B8%80%E9%94%AE%E5%8F%91%E5%B8%83-shell-%E5%91%BD%E4%BB%A4/","tags":null,"title":"Hexo 一键发布 shell 命令"},{"categories":null,"contents":"十月份 Android 7.0 在 Nexus 6 上正式推送后，我的 N6 只要联网就一直会在后台下载东西，特别是在感人的联通数据连接外网的速度下，基本上 SS 服务器的最大速度是多少就能跑到多少，吃了我三四 G 的流量，多交了几十块钱的话费，各种关闭后台数据限制全都没用，于是决定刷机，早就听闻 CM 的大名，决定试一下\n官方的 CM WiKi 有遗漏和错误的地方，让我走了不少弯路，弯路我就不贴出来了，直接上正确步骤\n## 步骤\n#### 准备\n* 下载系统文件压缩包和 Recovery 镜像\n直接在官网下载：[https://download.cyanogenmod.org/?device=shamu](https://download.cyanogenmod.org/?device=shamu)\n 开发版 nightly or 稳定版 snapshot * CyanogenMod Build 为 系统文件压缩包，CyanogenMod Recovery 为镜像文件\n* 我是 Recovery 和 CM 系统都刷，如果只是想刷系统不刷 CM 系统的话可以只下载压缩包不下载 Re 文件\n### 1. 解锁 Bootloader\n官方说解锁 Bootloader 会清除数据，可我解锁 Bootloader 之后在没刷系统之前又用了一下午手机也没事\n#### 确保你的电脑可以使用 Fastboot 和 ADB\n两个命令行工具，因为我安装过 Android Studio ，所以直接在 bash 的环境变量里设定一下路径，让它指向 ADB 和 Fastboot 的目录即可 * adb环境变量设置：\n打开终端Terminal，输入`open -e .bash_profile`回车打开.bash_profile文件，之前没配置过应该是空的，输入`export PATH=${PATH}:~/Library/Android/sdk/tools:~/Library/Android/sdk/platform-tools`这是两个路径tools和platform-tools，根据自己电脑SDK下tools和platform-tools的路径替换，保存。然后在Terminal输入`source .bash_profile`再输入 adb 和fastboot shell 命令和就不会 command not found 了  #### 在你的手机上打开 USB 调试模式\n各位应该都会吧，不会我也没办法了\n#### 在手机的开发者选项中开启 OEM 解锁选项\n#### 通过 USB 方式连接手机与电脑\n略\n#### Terminal 输入 以下命令让手机进入 Bootloader(Fastboot) 模式\n`adb reboot bootloader`\n或者手机关机按住电源键＋音量减键也可以进入\n#### 检查 Fastboot 连接手机进入 Bootloader 模式后，在终端中输入 `fastboot devices` 检查是否可以通过 Fastboot 工具操作手机\n`fastboot devices`\n* 如果没有显示你的手机序列号，而是显示 waiting for device , Fastboot 可能没有在你的电脑上被正确引导，可以查看一下 [Fastboot 文档](https://wiki.cyanogenmod.org/w/Doc:_fastboot_intro) 寻找更多信息\n* 如果显示 no permissions fastboot , 尝试一下使用 root 命令运行（需要管理员密码）\n`sudo fastboot devices` #### 解锁\n在 Terminal 中继续输入下面的命令解锁\n`fastboot oem unlock`\n手机上将会显示免责声明，该声明必须同意才能继续解锁，使用音量键上下移动选项，电源键确认选择\n如果手机没有自动重启，你可以手动重启，还是音量键上下电源键确认， Reboot System 选项，现在手机应该是解锁的了，你可以通过手机重启时 Google Logo 下面的开着的小锁图标验证是否解锁，锁开着就表示已经解锁了\n由于手机被完全重置，你要重新开启 USB 调试模式以便后续的操作\n官方文档说是解锁会清除手机里的全部数据，但我到此步为止，手机开机仍然可以正常使用，数据全都存在，完全清除手机里的数据是在第三大步时手动 Wipe 的\n### 2. 使用 Fastboot 安装 Recovery ( 安装 CM Recovery 非 CM 系统)\n#### 通过下述命令或手动操作手机进入 Bootloader 模式\n`adb reboot bootloader`\n并且检查是否进入\n`fastboot devices`\n#### 通过下面的命令将 Recovery 镜像文件写入手机\n`fastboot flash recovery your\\recovery\\image.img`\n有下划线的部分是 Recovery 镜像文件的文件名字\n我在操作此步时遇到了不能找到 img 文件的提示，我把 img 文件放手机 /sdcard 目录里放电脑上 fastboot 文件夹同级目录下都不行，最后找到了原因，让我特别怀疑自己，正确方法应该是将 Terminal 工作目录切换到 Recovery 所在的目录，然后执行写入命令__，我把 Recovery 文件放到桌面上，所以要先 `cd Desktop` 再然后执行写入命令\n#### 写入成功后，重启设备进入 Recovery 确认安装成功\n电源键＋音量减进入 Bootloader 模式然后音量键上下电源键确认选择 Recovery 模式进入\nCM 官方提示：某些 ROM 可能会在手机重启后覆盖你写入的 Recovery ，立即启动 Recovery 可以避免这种情况\n### 3. 在 Recovery 中安装 CM 系统\n#### 下载好 CM 系统 zip 包及可选包\n* 信仰加成可选包：谷歌应用框架 GAE\n推荐使用 OpenGApps , 一个开源的谷歌框架项目，你能想到的所有优点它都有\nNexus 6 的 GAE 在 [这里](http://opengapps.org/?api=6.0\u0026amp;variant=nano) 下载\n下载好之后放到电脑上准备写入手机，因为在接下来的操作中会删除手机上的所有数据\n#### 清除数据\n这一步可以选择备份，我没有备份，全删了，有种用新手机的错觉哈哈\n手动进入 Recovery ，在 Recovery 中选择 Wipe 和 Factory Reset\n* 先进入 Advanced 菜单选择 Wipe system partition 确定 Wipe\n* 然后返回主菜单选择 Factory reset\n#### 写入系统 zip 包\n选择主菜单的 Apply update ，这时有两个选项，用 ADB 方法获得 zip 包更新和使用手机里的 zip 包更新\n因为手机里的东西删光了，所以选择 Apply from ADB，这时屏幕上只显示一个 Cancel sideload 选项，这时候我们在电脑 Terminal 中输入\n`adb sideload /path/to/rom.zip`\n/path/to/rom.zip 为你的 zip 包位置，和写入 Recovery 一样，可以把 zip 包放到桌面然后将 Terminal 的工作目录切换到桌面\n`cd Desktop`\n现在可以直接把 /path/to/rom.zip 替换为 文件名.zip\n在这一步也是停了很久，官方的下载给了 CM 的 Recovery ，文档中却没有写怎么在 CM 的 Recovery 中刷 CM ，坑爹\n输入上述命令后，手机就会显示英文信息正在刷机之类，信仰加成包 OpenGApps 在写入 CM 之后不要重启继续在 Recovery 中再写入，也是用同样的方法\n#### 安装完成\n返回 Recovery 主菜单，选择 Reboot system now然后静静等待 CM 系统启动，第一次启动会稍微慢一点，耐心等待一下就好\n* 重要\n启动完成后会进行一系列初始化，在选择 Wi-Fi 那一步选择__**跳过**__！因为系统初次启动要和国外服务器连接验证之类，由于 GFW 的存在无连接外网，如果没有跳过加入了某个 Wi-Fi 就会卡在验证页面，这时候按住电源键强制重启再跳过即可。当然，如果你有自带 SS 的 Wi-Fi 当我没说\n进入系统界面后连接 Wi-Fi 会发现 Wi-Fi 上有感叹号，这是在 Android 5.0 之后新加入的网络评估功能，用以检测是否连接到网络，可以替换为国内可访问的地址或直接关闭也可，ADB 命令为\n`adb shell settings put global captive_portal_detection_enabled 0`\n至此，CM 就正式可以使用了，第一次使用 Markdown 写这么长的文章，内容难免纰漏错误，有什么看不懂的地方，欢迎各位留言。\n","permalink":"https://y4code.com/post/nexus-6-%E5%88%B7-cm-%E8%AF%A6%E7%BB%86%E6%AD%A5%E9%AA%A4/","tags":null,"title":"Nexus 6 刷 CM 详细步骤"},{"categories":null,"contents":"已从WordPress迁移到Hexo博客，特此留念\n","permalink":"https://y4code.com/post/my-first-post/","tags":null,"title":"第一篇Hexo文章"},{"categories":null,"contents":"看你 🐎 呢？\n 我喜欢搞一些自己看着喜欢的东西讨厌所有体制化和说死了的东西:\n认真，有趣，反对一切真理、湿货、忠告、定论\n","permalink":"https://y4code.com/aboutme/","tags":null,"title":""}]